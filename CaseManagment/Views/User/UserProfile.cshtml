@model Case.web.Models.UserViewModel
@{ 
    Model.Password = "pass1@dddd";
    Model.ConfirmPassword = "pass1@dddd";
}
<style>
    body {
        color: #fff;
        background: #63738a;
        font-family: 'Roboto', sans-serif;
    }

    .form-control {
        height: 40px;
        box-shadow: none;
        color: #969fa4;
    }

        .form-control:focus {
            border-color: #5cb85c;
        }

    .form-control, .btn {
        border-radius: 3px;
    }

    .signup-form {
        width: 450px;
        margin: 0 auto;
        padding: 30px 0;
        font-size: 15px;
    }

        .signup-form h2 {
            color: #636363;
            margin: 0 0 15px;
            position: relative;
            text-align: center;
        }

            .signup-form h2:before, .signup-form h2:after {
                content: "";
                height: 2px;
                width: 30%;
                background: #d4d4d4;
                position: absolute;
                top: 50%;
                z-index: 2;
            }

            .signup-form h2:before {
                left: 0;
            }

            .signup-form h2:after {
                right: 0;
            }

        .signup-form .hint-text {
            color: #999;
            margin-bottom: 30px;
            text-align: center;
        }

        .signup-form form {
            color: #999;
            border-radius: 3px;
            margin-bottom: 15px;
            background: #f2f3f7;
            box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
            padding: 30px;
        }

        .signup-form .form-group {
            margin-bottom: 20px;
        }

        .signup-form input[type="checkbox"] {
            margin-top: 3px;
        }

        .signup-form .btn {
            font-size: 16px;
            font-weight: bold;
            min-width: 140px;
            outline: none !important;
        }

        .signup-form .row div:first-child {
            padding-right: 10px;
        }

        .signup-form .row div:last-child {
            padding-left: 10px;
        }

        .signup-form a {
            color: #fff;
            text-decoration: underline;
        }

            .signup-form a:hover {
                text-decoration: none;
            }

        .signup-form form a {
            color: #5cb85c;
            text-decoration: none;
        }

            .signup-form form a:hover {
                text-decoration: underline;
            }

    .modal-body p {
        color: black;
    }

    .modal-dialog-scrollable .modal-body {
        overflow-y: auto;
        word-break: break-all;
    }
</style>
<div class="signup-form">
    <form asp-action="UserProfile" asp-controller="User" role="form">
        <h2>Profile</h2>
        <div asp-validation-summary="All" class="text-danger"></div>
        @Html.HiddenFor(x=> x.Id)
        @Html.HiddenFor(x => x.Password)
        @Html.HiddenFor(x => x.ConfirmPassword)
        <div class="form-group">
            <div class="row">
                <div class="col">
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col">
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", @placeholder = "Last Name" })
                    @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = "Email" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>
       
        <div class="form-group">
            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", @type = "number", @placeholder = "Enter Phone " })
            @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
        </div>
       
        <div class="form-group">
            @Html.TextAreaFor(m => m.Address, new { @class = "form-control", @placeholder = "Enter address" })
            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
        </div>
        <div class="form-group" style="border: 1px solid #ced4da;padding:5px;">
            <label>Gender</label>
            <div class="row">
                <div class="col">
                    <label>Male</label>
                    @Html.RadioButtonFor(model => model.Gender, "Male", new { @checked = "checked" })

                </div>
                <div class="col">
                    <label>Female</label>
                    @Html.RadioButtonFor(model => model.Gender, "Female")
                </div>
                <div class="col">
                    <label>Others</label>
                    @Html.RadioButtonFor(model => model.Gender, "Others")
                </div>
            </div>
        </div>
        <div class="form-group">
            <input asp-for="DateOfBirth" class="form-control" />
            @*@Html.TextBoxFor(m => m.DateOfBirth, "{0:MM/dd/yyyy}", new { @class = "form-control", @type = "date" })*@
            @Html.ValidationMessageFor(m => m.DateOfBirth, "", new { @class = "text-danger" })
        </div>
      
        <div class="form-group">
            <button type="submit" id="btnSubmit" class="btn btn-success btn-lg btn-block">Update</button>
        </div>
    </form>
</div>



@if (!string.IsNullOrEmpty(ViewBag.msg))
{
    @section Scripts{
        <script>
            Swal.fire({
                icon: 'success',
                title: 'Done',
                text: 'Updated successfully!',
                confirmButtonText: 'Ok',
                allowOutsideClick: false,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {                   
                }
            })
        </script>
    }
}

